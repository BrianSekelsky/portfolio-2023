---
import CardLabel from "./Card-label.astro";

interface Props {
  size: string;
  href: string;
  title: string;
  types: { text: string; special: boolean; }[]
  year: string;
  myColor?: string;
}

const { size, href = "#", title, types, year, myColor } = Astro.props;

let mainClasses;
if (size === "small") {
  mainClasses = "bg-white group w-full hover:cursor-pointer col-span-1 col-span-1"
} else {
  mainClasses = "bg-white group w-full hover:cursor-pointer col-span-1 row-span-1 sm:col-span-2 sm:row-span-2"
}

let typeNames: string;

for(let i = 0; i < types.length; i++) {
  typeNames = typeNames + " " + types[i].text
}
---

<div
  class:list={[mainClasses, typeNames]}
>
  <div class="relative overflow-hidden min-h-full w-full flex items-center justify-center rounded-md color">
    <a href={href} class="min-h-full flex justify-center">
    <div class="m-auto transition-all duration-200 group-hover:opacity-0 opacity-100">
      <slot class="transition-all duration-200" />
    </div>
    <div class="align-middle p-4 opacity-0 group-hover:opacity-100 flex text-center text-black border absolute bottom-0 top-0 w-full h-full transition-all duration-200 px-4 py-4 flex-col justify-center rounded-md">
      <div class="items-baseline pb-6">
        <div class="pb-2">
          <CardLabel value={year} , isLarge={false} />
        </div>
        <CardLabel value={title} , isLarge={true} />
      </div>
      <div class="w-1/2 h-auto mx-auto pb-6">
        <slot class="transition-all duration-200" />
      </div>
      <div class="">
        <div class="flex flex-wrap justify-center gap-2">
          {
            types.map((type) => (
            <div class={type.special ? "text-xs text-blue" : "text-black text-xs"}>
              <CardLabel value={"#" + type.text} , isLarge={false} />
            </div>
            ))
          }
        </div>
      </div>
    </div>
    </a>
  </div>
</div>

<style define:vars={{myColor}}>

.color {
  background-color: white;
  background-color: var(--myColor);
}

</style>
